export declare function glideRecordFactory({ sendRequest }: any): {
    new (tableName: any): {
        readonly tableName: any;
        encodedQuery: any;
        readonly conditions: any;
        readonly orderByFields: any;
        readonly orderByDescFields: any;
        limit: number;
        readonly _callback: any;
        currentRow: number;
        recordSet: any;
        readonly initialized: boolean;
        readonly ignoreNames: any;
        query(callback: any): any;
        _queryResponse(callback: any, response: any): void;
        _queryErrorResponse(callback: any, response?: {}): void;
        get(): void;
        _getResponse(callback: any, response: any): void;
        updateRecord(callback: any): any;
        deleteRecord(callback: any): any;
        addQuery(field: any, operator: string, value: any): void;
        hasNext(): boolean;
        next(): boolean;
        _next(): boolean;
        loadRow(index: any): void;
        _loadRecordSet(records: any): void;
        setEncodedQuery(queryString: any): void;
        getEncodedQuery(): string;
        orderBy(field: any): void;
        orderByDesc(field: any): void;
        setLimit(maxRows: any): void;
        getLimit(): number;
        setValue(fieldName: any, fieldValue: any): void;
        getValue(fieldName: any): any;
        getDisplayValue(fieldName: any): any;
        getCurrentRow(): any;
        getRowCount(): any;
        getTableName(): any;
        toString(): string;
        addOrderBy(field: any): void;
    };
    glideRequest: {
        getAngularURL: (path: any, parameters: any) => string;
        get: (url: any, options: any) => any;
        post: (url: any, options: any) => any;
        put: (url: any, options: any) => any;
        patch: (url: any, options: any) => any;
    };
};
